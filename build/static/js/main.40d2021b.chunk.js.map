{"version":3,"sources":["utils/serviceWorker.js","chatDefaults.js","components/ChatList.js","components/ChatCreationInput.js","components/ChatListTop.js","components/MessageFormTop.js","components/MessageItem.js","components/MessageHistory.js","components/MessageFormInput.js","components/MessageForm.js","components/ChatItem.js","components/ChatListContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","chatDefaults","appName","firstChatName","authorName","messageInputText","sendMessageText","chatName","ChatList","chatArray","className","map","item","index","key","props","render","ChatCreationInput","onChange","onKeyPress","onSubmit","value","type","placeholder","ChatListTop","name","onClick","label","MessageFormTop","handleReturn","MessageItem","number","date","author","text","Date","toLocaleString","defaultProps","MessageHistory","messageArray","MessageFormInput","MessageForm","state","input","handleButtonClick","bind","handleChange","handleKeyPress","handleSubmit","event","this","setState","target","preventDefault","save","appendMessage","valueOf","Event","cancelable","React","Component","ChatItem","messageForm","push","length","handleChatClick","ChatListContainer","startState","JSON","parse","handleInputChange","screen","chat","lsString","stringify","localStorage","setItem","createChat","getAttribute","rel","href","getItem","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40d2021b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n/* eslint no-console: 0 */\n/* eslint no-param-reassign: 0 */\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","const chatDefaults = {\n\tappName: 'messanger',\n\tfirstChatName: 'localhost',\n\tauthorName: 'localhost',\n\tmessageInputText: 'Введите сообщение',\n\tsendMessageText: 'Send message',\n\tchatName: 'Введите название'\n};\n\nexport default chatDefaults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ChatList({ chatArray }) {\n\n\treturn (\n\t\t<div className=\"chats-area\">\n\t\t\t{chatArray.map((item, index) => (\n\t\t\t\t<li key={item.props.index} >\n\t\t\t\t\t{item.render()}\n\t\t\t\t</li>)\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nChatList.propTypes = {\n\tchatArray: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default ChatList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport chatDefaults from '../chatDefaults';\n\nfunction ChatCreationInput({ onChange, onKeyPress, onSubmit, value }) {\n\treturn (\n\t\t<input\n\t\t\tclassName=\"chat-name-input\"\n\t\t\ttype=\"text\"\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tplaceholder={chatDefaults.chatName}\n\t\t\tonSubmit={onSubmit}\n\t\t\tonKeyPress={onKeyPress}\n\t\t/>\n\t);\n}\n\nChatCreationInput.propTypes = {\n\tonChange: PropTypes.func.isRequired,\n\tonKeyPress: PropTypes.func.isRequired,\n\tonSubmit: PropTypes.func.isRequired,\n\tvalue: PropTypes.string.isRequired,\n};\n\nexport default ChatCreationInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ChatListTop({ name }) {\n\treturn (\n\t\t<div className=\"chat-top-area\">\n\t\t\t<button\n\t\t\t\tclassName=\"chat-bars-button\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={null}\n\t\t\t\tlabel=\"bars\"\n\t\t\t>\n\t\t\t\t<i className=\"fa fa-bars\" />\n\t\t\t</button>\n\t\t\t<p className=\"chat-top-name\">{name}</p>\n\t\t</div>\n\t);\n}\n\nChatListTop.propTypes = {\n\tname: PropTypes.string.isRequired,\n};\n\nexport default ChatListTop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MessageFormTop({ name, handleReturn }) {\n\treturn (\n\t\t<div className=\"message-top-area\">\n\t\t\t<button\n\t\t\t\tclassName=\"chat-deactivation\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={handleReturn}\n\t\t\t>\n\t\t\t\t<i className=\"fa fa-chevron-left\" />\n\t\t\t</button>\n\n\t\t\t<p className=\"message-top-name\">{name}</p>\n\t\t</div>\n\t);\n}\n\nMessageFormTop.propTypes = {\n\thandleReturn: PropTypes.func.isRequired,\n\tname: PropTypes.string.isRequired,\n};\n\nexport default MessageFormTop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport chatDefaults from '../chatDefaults';\n\nfunction MessageItem({ number, date, author, text }) {\n\treturn (\n\t\t<div className=\"message-item-div\" index={number}>\n\t\t\t<p className=\"message-item-text\">{text}</p>\n\t\t\t<p className=\"message-item-author\">{author}</p>\n\t\t\t<p className=\"message-item-date\">{new Date(date).toLocaleString()}</p>\n\t\t</div>\n\t);\n}\n\nMessageItem.propTypes = {\n\tauthor: PropTypes.string,\n\tdate: PropTypes.number.isRequired,\n\tnumber: PropTypes.number.isRequired,\n\ttext: PropTypes.string.isRequired,\n};\n\nMessageItem.defaultProps = {\n\tauthor: chatDefaults.authorName,\n};\n\nexport default MessageItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MessageItem from './MessageItem';\n\nfunction MessageHistory({ messageArray }) {\n\treturn (\n\t\t<div className=\"message-history-list\">\n\t\t\t{messageArray.map((item, index) => (\n\t\t\t\t<li key={item.number}>\n\t\t\t\t\t<MessageItem\n\t\t\t\t\t\tauthor={item.author}\n\t\t\t\t\t\tdate={item.date}\n\t\t\t\t\t\tnumber={item.number}\n\t\t\t\t\t\ttext={item.text}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nMessageHistory.propTypes = {\n\tmessageArray: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MessageHistory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport chatDefaults from '../chatDefaults';\n\nfunction MessageFormInput({ onChange, onKeyPress, onSubmit, value }) {\n\treturn (\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"message-form-input\"\n\t\t\tplaceholder={chatDefaults.messageInputText}\n\t\t\tonChange={onChange}\n\t\t\tvalue={value}\n\t\t\tonSubmit={onSubmit}\n\t\t\tonKeyPress={onKeyPress}\n\t\t/>\n\t);\n}\n\nMessageFormInput.propTypes = {\n\tonKeyPress: PropTypes.func.isRequired,\n\tonSubmit: PropTypes.func.isRequired,\n\tonChange: PropTypes.func.isRequired,\n\tvalue: PropTypes.string.isRequired,\n};\n\nexport default MessageFormInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport chatDefaults from '../chatDefaults';\nimport MessageFormTop from './MessageFormTop';\nimport MessageHistory from './MessageHistory';\nimport MessageFormInput from './MessageFormInput';\n\nclass MessageForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { input: '' };\n\t\tthis.handleButtonClick = this.handleButtonClick.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({ input: event.target.value });\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst { input } = this.state;\n\t\tconst { save, appendMessage } = this.props;\n\t\tif (input === '') {\n\t\t\treturn;\n\t\t}\n\t\tappendMessage(input, chatDefaults.authorName, new Date().valueOf());\n\t\tthis.setState({ input: '' });\n\t\tsave();\n\t}\n\n\thandleKeyPress(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tevent.preventDefault();\n\t\t\tthis.handleSubmit(new Event('submit', { cancelable: true }));\n\t\t\t// cancelable: true is needed for Firefox\n\t\t\t// preventDefault() is not allowed to work otherwise\n\t\t}\n\t}\n\n\thandleButtonClick() {\n\t\tthis.handleSubmit(new Event('submit', { cancelable: true }));\n\t}\n\n\trender() {\n\t\tconst { name, handleReturn, messageArray } = this.props;\n\t\tconst { input } = this.state;\n\t\treturn (\n\t\t\t<div className=\"message-form-wrap\">\n\t\t\t\t<div className=\"message-form-head\">\n\t\t\t\t\t<MessageFormTop name={name} handleReturn={handleReturn} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-history\">\n\t\t\t\t\t<MessageHistory\n\t\t\t\t\t\tclassName=\"message-history\"\n\t\t\t\t\t\tchatName={name}\n\t\t\t\t\t\tmessageArray={messageArray}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"message-sending-form\">\n\t\t\t\t\t<form className=\"message-form\">\n\t\t\t\t\t\t<MessageFormInput\n\t\t\t\t\t\t\tname=\"message-text\"\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\t\t\t\tonKeyPress={this.handleKeyPress}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</form>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"message-button\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={this.handleButtonClick}\n\t\t\t\t\t>\n\t\t\t\t\t\t{chatDefaults.sendMessageText}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nMessageForm.propTypes = {\n\tappendMessage: PropTypes.func.isRequired,\n\thandleReturn: PropTypes.func.isRequired,\n\tmessageArray: PropTypes.arrayOf(PropTypes.object).isRequired,\n\tname: PropTypes.string.isRequired,\n\tsave: PropTypes.func.isRequired,\n};\n\nexport default MessageForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MessageForm from './MessageForm';\n\nclass ChatItem extends React.Component {\n\tconstructor(props) {\n\t\t// { name, messageArray, handleReturn, save }\n\t\tsuper(props);\n\t\tconst { name, save, messageArray, handleReturn } = props;\n\t\tthis.appendMessage = this.appendMessage.bind(this);\n\t\tthis.messageForm = (\n\t\t\t<MessageForm\n\t\t\t\tname={name}\n\t\t\t\tmessageArray={messageArray}\n\t\t\t\thandleReturn={handleReturn}\n\t\t\t\tsave={save}\n\t\t\t\tappendMessage={this.appendMessage}\n\t\t\t/>\n\t\t);\n\t}\n\n\tappendMessage(text, author, date) {\n\t\tconst { messageArray } = this.props;\n\t\tmessageArray.push({\n\t\t\tnumber: messageArray.length,\n\t\t\ttext,\n\t\t\tauthor,\n\t\t\tdate: date || new Date().valueOf(),\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { index, name, handleChatClick } = this.props;\n\t\treturn (\n\t\t\t<div className=\"chat-list-item\" index={index}>\n\t\t\t\t<div className=\"chat-item-text\">\n\t\t\t\t\t<p className=\"chat-item-name\">{name}</p>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"chat-messages-button\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tindex={index}\n\t\t\t\t\tonClick={handleChatClick}\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fa fa-chevron-right\" index={index} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nChatItem.propTypes = {\n\thandleChatClick: PropTypes.func.isRequired,\n\thandleReturn: PropTypes.func.isRequired,\n\tindex: PropTypes.number.isRequired,\n\tmessageArray: PropTypes.arrayOf(PropTypes.object).isRequired,\n\tname: PropTypes.string.isRequired,\n\tsave: PropTypes.func.isRequired,\n};\n\nexport default ChatItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatList from './ChatList';\nimport ChatCreationInput from './ChatCreationInput';\nimport ChatListTop from './ChatListTop';\nimport chatDefaults from '../chatDefaults';\nimport ChatItem from './ChatItem';\n\nclass ChatListContainer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst { startState } = props;\n\t\tconst state = JSON.parse(startState);\n\t\tthis.handleReturn = this.handleReturn.bind(this);\n\t\tthis.save = this.save.bind(this);\n\t\tthis.handleButtonClick = this.handleButtonClick.bind(this);\n\t\tthis.handleChatClick = this.handleChatClick.bind(this);\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.state = { chatArray: [], input: '', screen: 'main' };\n\t\tif (state != null) {\n\t\t\tconst { chatArray } = this.state;\n\t\t\tfor (const chat of state.chatArray) {\n\t\t\t\tchat.props.handleReturn = this.handleReturn;\n\t\t\t\tchat.props.save = this.save;\n\t\t\t\tchat.props.handleChatClick = this.handleChatClick;\n\t\t\t\tchatArray.push(new ChatItem(chat.props));\n\t\t\t}\n\t\t}\n\t}\n\n\tsave() {\n\t\tconst lsString = JSON.stringify(this.state);\n\t\tlocalStorage.setItem(chatDefaults.appName, lsString);\n\t}\n\n\thandleReturn() {\n\t\tthis.setState({ screen: 'main' });\n\t}\n\n\thandleInputChange(event) {\n\t\tthis.setState({ input: event.target.value });\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst { input, chatArray } = this.state;\n\t\tif (input === '') {\n\t\t\treturn;\n\t\t}\n\t\tfor (const chat of chatArray) {\n\t\t\tif (chat.name === input) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.createChat(input);\n\t\tthis.setState({ input: '' });\n\t\tthis.save();\n\t}\n\n\thandleKeyPress(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tevent.preventDefault();\n\t\t\tthis.handleSubmit(new Event('submit', { cancelable: true }));\n\t\t\t// cancelable: true is needed for Firefox\n\t\t\t// preventDefault() is not allowed to work otherwise\n\t\t}\n\t}\n\n\thandleButtonClick() {\n\t\tthis.handleSubmit(new Event('submit', { cancelable: true }));\n\t}\n\n\thandleChatClick(event) {\n\t\tconst index = event.target.getAttribute('index');\n\t\tthis.setState({ screen: index });\n\t}\n\n\tcreateChat(name) {\n\t\tconst { chatArray } = this.state;\n\t\tchatArray.push(\n\t\t\tnew ChatItem({\n\t\t\t\tname,\n\t\t\t\tindex: chatArray.length,\n\t\t\t\thandleReturn: this.handleReturn,\n\t\t\t\tsave: this.save,\n\t\t\t\thandleChatClick: this.handleChatClick,\n\t\t\t\tmessageArray: [],\n\t\t\t}),\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { screen, chatArray, input } = this.state;\n\t\tconst { name } = this.props;\n\t\tif (screen === 'main') {\n\t\t\treturn (\n\t\t\t\t<div className=\"chat-list-area\">\n\t\t\t\t\t<div className=\"chat-list-head\">\n\t\t\t\t\t\t<ChatListTop name={name} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wrap-chat-list\">\n\t\t\t\t\t\t<ChatList chatArray={chatArray} />\n\t\t\t\t\t\t<div className=\"chat-creation\">\n\t\t\t\t\t\t\t<form className=\"chat-creation-form\">\n\t\t\t\t\t\t\t\t<ChatCreationInput\n\t\t\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\t\t\t\t\t\tonKeyPress={this.handleKeyPress}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"chat-create\"\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tonClick={this.handleButtonClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\tconst chatIndex = screen;\n\t\treturn chatArray[chatIndex].messageForm;\n\t}\n}\n\nChatListContainer.propTypes = {\n\tname: PropTypes.string.isRequired,\n\tstartState: PropTypes.string,\n};\n\nChatListContainer.defaultProps = {\n\tstartState: null,\n};\n\nexport default ChatListContainer;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport './styles/globalStyles.css';\nimport './styles/chatContainerTopStyles.css';\nimport './styles/chatCreationStyles.css';\nimport './styles/chatItemStyles.css';\nimport './styles/chatListContainerStyles.css';\nimport './styles/messageFormComponentStyles.css';\nimport './styles/messageFormTopStyles.css';\nimport './styles/messageItemStyles.css';\n\nimport * as serviceWorker from './utils/serviceWorker';\nimport chatDefaults from './chatDefaults';\nimport ChatListContainer from './components/ChatListContainer';\n\nrender(\n\t<div className=\"app-container\">\n\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<ChatListContainer name='localhost'\n\t\t\tstartState={localStorage.getItem(chatDefaults.appName)} />\n\t</div>,\n\tdocument.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}